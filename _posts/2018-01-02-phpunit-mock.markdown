---
layout: post
title:  "项目中集成单元测试总结"
date:   2018-01-02 21:12:01 +0800
tags: test autotest
categories: 其它
---

从开始给项目写测试到初步理解在项目中集成单元测试，我也花了两年多的时间，虽然还是有很多疑惑，但也有一此小小的收获。下面总结一以下几点

<!--break-->

### 对一个项目要引进单元测试首选要做什么

* 无论什么项目，在运行起来后，执行动作之前。都会启动或创建很多必要的组件（或都说是把框架载到内存中）。暂且把这个过程叫做载入动作的运行环境，我们写的代码在这个都依赖这个环境。
- 这个环境在单元测试中，默认是稳定的。我们只测试基于其上我们写的代码。
- 方法是测试的最小单位
- 测试也须要尽可能和应用一样的运行环境（即载入框架）
- 测试最重要的是断言，一般断言关注的点是返回值

### 创建测试"应用"环境

在各种测试框架中，这个步骤通常是执行一个"bootstrap",在其中引入框架以确保被测代码能在其上正常运行。

### 隔离对被测应用的影响（状态尽可能分离)

- 这一点可以通过配置区分
- 定义单元测试的环境常量 ENV_UNIT_TEST ，当配置无法达到目的时，可在被测代码中加判断，但这明显不是一个好方法


### 什么时候使用Mock和Stub

 1. 真实对象的行为具有不确定性。
 2. 真实对象难以创建。
 3. 真实对象的行为难以模拟(例如网络错误)。
 4. 真实对象运行效率很低。
 5. 真实对象有或者是UI。
 6. 测试需要得到某个对象列表，但是真实对象必须在某种环境下才能提供。
 7. 真实对象还没实现。

### 测试效率很重要

- 一个非常耗时的测试是我们不愿意看到的，测试应尽可能快的完成
- 不确定因素（比如网络原因、三方服务异常等）导致测试可能通过、可能不通过
- 重复的测试，强耦合的类引用的其它服务类可能已经跑过测试了，没有必要再测试它的正确性。

### Mock和Stub的使用

- Mock创建是根据现有类进行创建
- 列举要被Mock的方法
- 设定返回值

### Mock和Stub的作用

- Mock用于模仿一些外部依赖的行为
- 避免重复测试，减少测试时间

### Mock和Stub区别

- Mock是不存在的,是粗粒度的。stub是真实实现的一个对像
- 对mock关注其参数的验证，调用次数验证。mock相当于只有一个返回值的空实现，Stub更加灵活。
- 根据外部依赖的情况选择Mock及Stub

